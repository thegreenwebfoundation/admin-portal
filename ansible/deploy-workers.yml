---
- name: Deploy updates for the worker nodes
  hosts:
    - app1.thegreenwebfoundation.org
    - app2.thegreenwebfoundation.org
  remote_user: "deploy"
  become: false

  vars:
    project_git_repo: "git@github.com:thegreenwebfoundation/admin-portal.git"
    project_deploy_strategy: git
    project_version: "{{ project_deploy_branch }}"
    project_local_path: "../"
    project_unwanted_items:
      - .git
    project_finalize: true
    # if an app servers are behind nginx working as reverse proxy, it is not necessary to
    # run nginx on the machine
    use_nginx: false
    # setting this to true will fetch the latest version of nodejs
    install_node: false
    # set this to true will fetch the system requirements like python, mariadb, redis,
    # and so on
    install_system_reqs: false
    # run an update of our front dependencies as part of the deploy. This is better
    # handled in source control, but if the front end will not build in deployment, this
    # is a workaround
    update_front_end_deps: true
    # For triggering restarts with systemd
    service_restart: true
    service_user: "deploy"

    # See "dramatiq_threads" and "dramatiq_processes"
    # in the inventory

    # flag for deciding to compile assets or not
    # this is the slowest deploy step
    compile_assets: false


  roles:
    - f500.project_deploy

  tasks:
    - name: Set up most recent timestamps directories
      ansible.builtin.include_tasks: "_set_up_directories.yml"

    - name: Install dependencies for python and js
      ansible.builtin.include_tasks: "_install_deploy_dependencies.yml"

    - name: Assemble assets and related files
      ansible.builtin.include_tasks: "_assemble_deploy_assets.yml"
      when: compile_assets is true

    - name: Set up script for running workers and gunicorn, via systemd
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: deploy
        group: deploy
        mode: "0755"
      loop:
        - {
            src: "run_worker.sh.j2",
            dest: "{{ project_root }}/current/run_worker.sh",
          }
        - {
            src: "run_gunicorn.sh.j2",
            dest: "{{ project_root }}/current/run_gunicorn.sh",
          }
      become: true
      tags:
        - systemd

    - name: Set up systemd entries for workers and web app
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: deploy
        group: deploy
        mode: "0755"
      loop:
        - {
            src: "systemd.web-app.service.j2",
            dest: "/etc/systemd/system/{{ service_gunicorn_app }}.service",
          }
        - {
            src: "systemd.worker.service.j2",
            dest: "/etc/systemd/system/{{ service_worker_job }}.service",
          }
      become: true
      tags:
        - systemd
        - config

    - name: Trigger restart for worker with systemd
      ansible.builtin.service:
        name: "{{ service_worker_job }}"
        state: restarted
      become: true
      when: service_restart is true
