---
- name: Add apt repository for recent version of python with Deadsnakes
  ansible.builtin.apt_repository:
    repo: ppa:deadsnakes
    state: present
  become: true
  tags: [python]

- name: Install python libraries
  ansible.builtin.apt:
    pkg:
      - python3.12
      - python3.12-venv
      - python3.12-dev
      - python-is-python3
    state: present
    update_cache: true
  become: true
  when: install_system_reqs is true
  tags: [python]

- name: Install mariadb libraries for python
  ansible.builtin.apt:
    pkg:
      - build-essential
      - libmariadb-dev
      #- libmariadbclient-dev
      - libmariadb3
      - mariadb-client
      - mariadb-common
    state: present
    update_cache: true
  become: true
  when: install_system_reqs is true
  tags: [mariadb]

- name: Check if FNM is already installed
  ansible.builtin.stat:
    path: "/home/deploy/.local/share/fnm/fnm"
  register: fnm_installed
  when: install_node is true
  tags: [fnm-install]

# - name:
#   ansible.builtin.debug:
#     var: fnm_installed
#   when: install_node is true
#   tags: [fnm-install]

- name: Download FNM install (Fast Node Manager) script
  ansible.builtin.get_url:
    url: "https://fnm.vercel.app/install"
    dest: "/tmp/fnm.install.sh"
    mode: "0755"
  when: install_node is true and fnm_installed.stat.exists is false
  tags: [fnm-install]

- name: Run FNM install script
  ansible.builtin.command: "bash /tmp/fnm.install.sh"
  when: install_node is true and fnm_installed.stat.exists is false
  tags: [fnm-install]

  # FNM relies on a set of environment variables to be set in the shell.
  # So we call fnm
- name: Install node and npm
  ansible.builtin.shell: |
    set -o pipefail
    eval "$(fnm env)"
    fnm use --install-if-missing 22
  args:
    executable: "/usr/bin/bash"
  # set the PATH to include the fnm binary
  environment:
    PATH: "/home/deploy/.local/share/fnm/:{{  ansible_env.PATH }}"
  when: install_node is true and fnm_installed.stat.exists is true
  tags: [fnm-install]

- name: Download uv install script
  ansible.builtin.get_url:
    url: "https://astral.sh/uv/install.sh"
    dest: "/tmp/uv.install.sh"
    mode: "0755"
  when: install_uv is true
  tags: [uv-install]

- name: Check if uv is already installed
  ansible.builtin.stat:
    path: "/home/deploy/.local/bin/uv"
  register: uv_installed
  when: install_uv is true
  tags: [uv-install]

- name: Install uv for managing python dependencies
  ansible.builtin.shell: "bash /tmp/uv.install.sh"
  when: install_system_reqs is true
  tags: [uv-install]
