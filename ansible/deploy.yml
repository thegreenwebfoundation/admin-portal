---
- name: Deploy the TGWF django admin
  hosts:
    # - app1.thegreenwebfoundation.org
    # - app2.thegreenwebfoundation.org
    # - app3.thegreenwebfoundation.org
    # - app4.thegreenwebfoundation.org
    # - app5.thegreenwebfoundation.org

    - app_servers
    # api servers are app1, app2, and app4, mainly serving API traffic
    # - api_servers
    # admin server is app3, mainly serving member portal traffic
    # - admin_servers

  remote_user: "deploy"
  become: false

  vars:
    project_git_repo: "git@github.com:thegreenwebfoundation/admin-portal.git"
    project_deploy_strategy: git
    project_version: "{{ project_deploy_branch }}"
    project_local_path: "../"
    project_unwanted_items:
      - .git
    project_finalize: true

    # setting this to true will fetch the latest version of nodejs
    install_node: false
    # run an update of our front end dependencies as part of the deploy. This is better
    # handled in source control, but if the front end will not build in deployment, this
    # is a workaround
    update_front_end_deps: true

    # create new dotenv file in shared directory (use when adding new env vars)
    update_dotenv: true

    service_restart: true
    service_user: "deploy"

    # flag for deciding to compile assets or not
    # this is the slowest deploy step
    compile_assets: true

    # See "dramatiq_threads" and "dramatiq_processes"
    # in the inventory to set specific numbers of
    # processes and threads

  pre_tasks:
    - name: Print Ansible version
      debug:
        msg: "Ansible version is  {{ ansible_version.full }}"

    - name: Check Ansible version is less than or equal to 2.18
      assert:
        that: "{{ansible_version.full is version_compare('2.18', '<=') }}"

  roles:
    - f500.project_deploy

  tasks:
    - name: Set up most recent timestamps directories
      ansible.builtin.include_tasks: "_set_up_directories.yml"

    - name: Install dependencies for python and js
      ansible.builtin.include_tasks: "_install_deploy_dependencies.yml"
      tags: [uv, uv-install]

    - name: Assemble assets and related files
      ansible.builtin.include_tasks: "_assemble_deploy_assets.yml"
      when: compile_assets is true

    - name: Template .env file to shared directory
      ansible.builtin.template:
        src: "templates/dotenv.j2"
        dest: "{{ project_root }}/shared/.env"
        mode: "0755"
        owner: deploy
        group: deploy
      become: true
      when: update_dotenv is true
      tags: [dotenv]

    - name: Set up process management with systemd
      ansible.builtin.include_tasks: "_set_up_process_mgmt.yml"
      tags:
        - systemd

    - name: Query state of web app service
      ansible.builtin.service_facts:
      tags: [systemd-check]

    - name: Show state of services
      ansible.builtin.debug:
        var: ansible_facts.services["{{ service_gunicorn_app }}.service"]
      tags: [systemd-check]

    - name: Trigger restart for app with systemd
      ansible.builtin.systemd:
        name: "{{ service_gunicorn_app }}"
        state: restarted
      become: true
      when: service_restart is true
      tags:
        - systemd
